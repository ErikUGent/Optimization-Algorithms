from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp

def create_data_model():
    data = {}
    data['distance_matrix'] = [
 [0.0000e+00, 4.5150e+01, 4.4980e+01, 4.4630e+01, 4.4270e+01, 4.4030e+01,
  4.3790e+01, 4.3240e+01, 4.2830e+01, 4.6490e+01, 4.5580e+01, 6.7560e+02,
  6.7469e+02, 6.7380e+02, 2.2392e+02, 2.2354e+02, 2.2287e+02, 2.2444e+02,
  2.2567e+02, 2.2728e+02, 2.2890e+02, 2.2521e+02, 2.2532e+02, 2.2667e+02,
  6.7311e+02, 6.7227e+02, 6.7125e+02],
 [4.5150e+01, 0.0000e+00, 7.4000e-01, 1.3700e+00, 2.0200e+00, 2.7100e+00,
  3.7400e+00, 4.1300e+00, 4.4700e+00, 2.0200e+00, 1.0800e+00, 6.3120e+02,
  6.3034e+02, 6.2949e+02, 1.9841e+02, 1.9763e+02, 1.9666e+02, 1.9817e+02,
  1.9934e+02, 2.0087e+02, 2.0238e+02, 2.0001e+02, 1.9946e+02, 2.0069e+02,
  6.2883e+02, 6.2802e+02, 6.2704e+02],
 [4.4980e+01, 7.4000e-01, 0.0000e+00, 6.5000e-01, 1.3100e+00, 1.9900e+00,
  3.0100e+00, 3.4300e+00, 3.7800e+00, 2.7000e+00, 1.8200e+00, 6.3152e+02,
  6.3065e+02, 6.2980e+02, 1.9913e+02, 1.9834e+02, 1.9737e+02, 1.9888e+02,
  2.0005e+02, 2.0158e+02, 2.0309e+02, 2.0073e+02, 2.0017e+02, 2.0140e+02,
  6.2915e+02, 6.2835e+02, 6.2737e+02],
 [4.4630e+01, 1.3700e+00, 6.5000e-01, 0.0000e+00, 6.7000e-01, 1.3500e+00,
  2.3700e+00, 2.7800e+00, 3.1300e+00, 3.3400e+00, 2.4500e+00, 6.3197e+02,
  6.3111e+02, 6.3027e+02, 1.9977e+02, 1.9899e+02, 1.9801e+02, 1.9952e+02,
  2.0069e+02, 2.0223e+02, 2.0373e+02, 2.0137e+02, 2.0081e+02, 2.0205e+02,
  6.2961e+02, 6.2881e+02, 6.2784e+02],
 [4.4270e+01, 2.0200e+00, 1.3100e+00, 6.7000e-01, 0.0000e+00, 6.9000e-01,
  1.7200e+00, 2.1100e+00, 2.4700e+00, 4.0100e+00, 3.1100e+00, 6.3245e+02,
  6.3159e+02, 6.3075e+02, 2.0043e+02, 1.9965e+02, 1.9868e+02, 2.0019e+02,
  2.0136e+02, 2.0289e+02, 2.0440e+02, 2.0203e+02, 2.0148e+02, 2.0271e+02,
  6.3009e+02, 6.2930e+02, 6.2832e+02],
 [4.4030e+01, 2.7100e+00, 1.9900e+00, 1.3500e+00, 6.9000e-01, 0.0000e+00,
  1.0400e+00, 1.4400e+00, 1.8200e+00, 4.6900e+00, 3.7900e+00, 6.3283e+02,
  6.3198e+02, 6.3114e+02, 2.0112e+02, 2.0033e+02, 1.9936e+02, 2.0087e+02,
  2.0204e+02, 2.0357e+02, 2.0508e+02, 2.0271e+02, 2.0216e+02, 2.0339e+02,
  6.3049e+02, 6.2969e+02, 6.2872e+02],
 [4.3790e+01, 3.7400e+00, 3.0100e+00, 2.3700e+00, 1.7200e+00, 1.0400e+00,
  0.0000e+00, 5.8000e-01, 1.0300e+00, 5.6900e+00, 4.8200e+00, 6.3332e+02,
  6.3247e+02, 6.3164e+02, 2.0213e+02, 2.0134e+02, 2.0037e+02, 2.0188e+02,
  2.0304e+02, 2.0458e+02, 2.0608e+02, 2.0373e+02, 2.0317e+02, 2.0440e+02,
  6.3099e+02, 6.3020e+02, 6.2923e+02],
 [4.3240e+01, 4.1300e+00, 3.4300e+00, 2.7800e+00, 2.1100e+00, 1.4400e+00,
  5.8000e-01, 0.0000e+00, 4.4000e-01, 6.1200e+00, 5.2100e+00, 6.3391e+02,
  6.3305e+02, 6.3222e+02, 2.0254e+02, 2.0176e+02, 2.0079e+02, 2.0230e+02,
  2.0347e+02, 2.0500e+02, 2.0651e+02, 2.0414e+02, 2.0359e+02, 2.0482e+02,
  6.3157e+02, 6.3078e+02, 6.2981e+02],
 [4.2830e+01, 4.4700e+00, 3.7800e+00, 3.1300e+00, 2.4700e+00, 1.8200e+00,
  1.0300e+00, 4.4000e-01, 0.0000e+00, 6.4700e+00, 5.5300e+00, 6.3435e+02,
  6.3350e+02, 6.3266e+02, 2.0287e+02, 2.0209e+02, 2.0112e+02, 2.0263e+02,
  2.0380e+02, 2.0533e+02, 2.0684e+02, 2.0446e+02, 2.0391e+02, 2.0515e+02,
  6.3202e+02, 6.3122e+02, 6.3026e+02],
 [4.6490e+01, 2.0200e+00, 2.7000e+00, 3.3400e+00, 4.0100e+00, 4.6900e+00,
  5.6900e+00, 6.1200e+00, 6.4700e+00, 0.0000e+00, 1.0400e+00, 6.2963e+02,
  6.2875e+02, 6.2790e+02, 1.9644e+02, 1.9565e+02, 1.9467e+02, 1.9618e+02,
  1.9735e+02, 1.9889e+02, 2.0039e+02, 1.9804e+02, 1.9748e+02, 1.9871e+02,
  6.2724e+02, 6.2643e+02, 6.2544e+02],
 [4.5580e+01, 1.0800e+00, 1.8200e+00, 2.4500e+00, 3.1100e+00, 3.7900e+00,
  4.8200e+00, 5.2100e+00, 5.5300e+00, 1.0400e+00, 0.0000e+00, 6.3061e+02,
  6.2974e+02, 6.2888e+02, 1.9733e+02, 1.9655e+02, 1.9558e+02, 1.9709e+02,
  1.9826e+02, 1.9980e+02, 2.0131e+02, 1.9893e+02, 1.9838e+02, 1.9962e+02,
  6.2822e+02, 6.2741e+02, 6.2643e+02],
 [6.7560e+02, 6.3120e+02, 6.3152e+02, 6.3197e+02, 6.3245e+02, 6.3283e+02,
  6.3332e+02, 6.3391e+02, 6.3435e+02, 6.2963e+02, 6.3061e+02, 0.0000e+00,
  3.2000e+00, 6.2700e+00, 5.2584e+02, 5.2415e+02, 5.2304e+02, 5.2197e+02,
  5.2111e+02, 5.1993e+02, 5.1855e+02, 5.2669e+02, 5.2348e+02, 5.2229e+02,
  8.6200e+00, 1.1390e+01, 1.4400e+01],
 [6.7469e+02, 6.3034e+02, 6.3065e+02, 6.3111e+02, 6.3159e+02, 6.3198e+02,
  6.3247e+02, 6.3305e+02, 6.3350e+02, 6.2875e+02, 6.2974e+02, 3.2000e+00,
  0.0000e+00, 3.0700e+00, 5.2411e+02, 5.2244e+02, 5.2134e+02, 5.2026e+02,
  5.1939e+02, 5.1820e+02, 5.1682e+02, 5.2496e+02, 5.2176e+02, 5.2057e+02,
  5.4200e+00, 8.1900e+00, 1.1190e+01],
 [6.7380e+02, 6.2949e+02, 6.2980e+02, 6.3027e+02, 6.3075e+02, 6.3114e+02,
  6.3164e+02, 6.3222e+02, 6.3266e+02, 6.2790e+02, 6.2888e+02, 6.2700e+00,
  3.0700e+00, 0.0000e+00, 5.2245e+02, 5.2079e+02, 5.1969e+02, 5.1860e+02,
  5.1773e+02, 5.1654e+02, 5.1515e+02, 5.2329e+02, 5.2009e+02, 5.1890e+02,
  2.3500e+00, 5.1300e+00, 8.1300e+00],
 [2.2392e+02, 1.9841e+02, 1.9913e+02, 1.9977e+02, 2.0043e+02, 2.0112e+02,
  2.0213e+02, 2.0254e+02, 2.0287e+02, 1.9644e+02, 1.9733e+02, 5.2584e+02,
  5.2411e+02, 5.2245e+02, 0.0000e+00, 2.3200e+00, 4.2200e+00, 4.3500e+00,
  4.8500e+00, 5.9100e+00, 7.3700e+00, 2.2700e+00, 2.3600e+00, 3.6600e+00,
  5.2117e+02, 5.1963e+02, 5.1787e+02],
 [2.2354e+02, 1.9763e+02, 1.9834e+02, 1.9899e+02, 1.9965e+02, 2.0033e+02,
  2.0134e+02, 2.0176e+02, 2.0209e+02, 1.9565e+02, 1.9655e+02, 5.2415e+02,
  5.2244e+02, 5.2079e+02, 2.3200e+00, 0.0000e+00, 1.9300e+00, 2.2300e+00,
  3.0900e+00, 4.5300e+00, 6.2100e+00, 4.4800e+00, 1.8300e+00, 3.1300e+00,
  5.1951e+02, 5.1798e+02, 5.1623e+02],
 [2.2287e+02, 1.9666e+02, 1.9737e+02, 1.9801e+02, 1.9868e+02, 1.9936e+02,
  2.0037e+02, 2.0079e+02, 2.0112e+02, 1.9467e+02, 1.9558e+02, 5.2304e+02,
  5.2134e+02, 5.1969e+02, 4.2200e+00, 1.9300e+00, 0.0000e+00, 1.5900e+00,
  2.8200e+00, 4.4700e+00, 6.1700e+00, 6.4100e+00, 3.3000e+00, 4.1600e+00,
  5.1842e+02, 5.1690e+02, 5.1515e+02],
 [2.2444e+02, 1.9817e+02, 1.9888e+02, 1.9952e+02, 2.0019e+02, 2.0087e+02,
  2.0188e+02, 2.0230e+02, 2.0263e+02, 1.9618e+02, 1.9709e+02, 5.2197e+02,
  5.2026e+02, 5.1860e+02, 4.3500e+00, 2.2300e+00, 1.5900e+00, 0.0000e+00,
  1.2400e+00, 2.8800e+00, 4.5900e+00, 6.2500e+00, 2.5900e+00, 2.9400e+00,
  5.1733e+02, 5.1580e+02, 5.1405e+02],
 [2.2567e+02, 1.9934e+02, 2.0005e+02, 2.0069e+02, 2.0136e+02, 2.0204e+02,
  2.0304e+02, 2.0347e+02, 2.0380e+02, 1.9735e+02, 1.9826e+02, 5.2111e+02,
  5.1939e+02, 5.1773e+02, 4.8500e+00, 3.0900e+00, 2.8200e+00, 1.2400e+00,
  0.0000e+00, 1.6500e+00, 3.3600e+00, 6.4300e+00, 2.6600e+00, 2.3500e+00,
  5.1646e+02, 5.1493e+02, 5.1317e+02],
 [2.2728e+02, 2.0087e+02, 2.0158e+02, 2.0223e+02, 2.0289e+02, 2.0357e+02,
  2.0458e+02, 2.0500e+02, 2.0533e+02, 1.9889e+02, 1.9980e+02, 5.1993e+02,
  5.1820e+02, 5.1654e+02, 5.9100e+00, 4.5300e+00, 4.4700e+00, 2.8800e+00,
  1.6500e+00, 0.0000e+00, 1.7200e+00, 7.0700e+00, 3.5600e+00, 2.5200e+00,
  5.1526e+02, 5.1372e+02, 5.1196e+02],
 [2.2890e+02, 2.0238e+02, 2.0309e+02, 2.0373e+02, 2.0440e+02, 2.0508e+02,
  2.0608e+02, 2.0651e+02, 2.0684e+02, 2.0039e+02, 2.0131e+02, 5.1855e+02,
  5.1682e+02, 5.1515e+02, 7.3700e+00, 6.2100e+00, 6.1700e+00, 4.5900e+00,
  3.3600e+00, 1.7200e+00, 0.0000e+00, 8.2100e+00, 5.0300e+00, 3.7500e+00,
  5.1386e+02, 5.1232e+02, 5.1056e+02],
 [2.2521e+02, 2.0001e+02, 2.0073e+02, 2.0137e+02, 2.0203e+02, 2.0271e+02,
  2.0373e+02, 2.0414e+02, 2.0446e+02, 1.9804e+02, 1.9893e+02, 5.2669e+02,
  5.2496e+02, 5.2329e+02, 2.2700e+00, 4.4800e+00, 6.4100e+00, 6.2500e+00,
  6.4300e+00, 7.0700e+00, 8.2100e+00, 0.0000e+00, 3.7800e+00, 4.5500e+00,
  5.2200e+02, 5.2045e+02, 5.1868e+02],
 [2.2532e+02, 1.9946e+02, 2.0017e+02, 2.0081e+02, 2.0148e+02, 2.0216e+02,
  2.0317e+02, 2.0359e+02, 2.0391e+02, 1.9748e+02, 1.9838e+02, 5.2348e+02,
  5.2176e+02, 5.2009e+02, 2.3600e+00, 1.8300e+00, 3.3000e+00, 2.5900e+00,
  2.6600e+00, 3.5600e+00, 5.0300e+00, 3.7800e+00, 0.0000e+00, 1.4500e+00,
  5.1881e+02, 5.1728e+02, 5.1552e+02],
 [2.2667e+02, 2.0069e+02, 2.0140e+02, 2.0205e+02, 2.0271e+02, 2.0339e+02,
  2.0440e+02, 2.0482e+02, 2.0515e+02, 1.9871e+02, 1.9962e+02, 5.2229e+02,
  5.2057e+02, 5.1890e+02, 3.6600e+00, 3.1300e+00, 4.1600e+00, 2.9400e+00,
  2.3500e+00, 2.5200e+00, 3.7500e+00, 4.5500e+00, 1.4500e+00, 0.0000e+00,
  5.1761e+02, 5.1607e+02, 5.1431e+02],
 [6.7311e+02, 6.2883e+02, 6.2915e+02, 6.2961e+02, 6.3009e+02, 6.3049e+02,
  6.3099e+02, 6.3157e+02, 6.3202e+02, 6.2724e+02, 6.2822e+02, 8.6200e+00,
  5.4200e+00, 2.3500e+00, 5.2117e+02, 5.1951e+02, 5.1842e+02, 5.1733e+02,
  5.1646e+02, 5.1526e+02, 5.1386e+02, 5.2200e+02, 5.1881e+02, 5.1761e+02,
  0.0000e+00, 2.7700e+00, 5.7800e+00],
 [6.7227e+02, 6.2802e+02, 6.2835e+02, 6.2881e+02, 6.2930e+02, 6.2969e+02,
  6.3020e+02, 6.3078e+02, 6.3122e+02, 6.2643e+02, 6.2741e+02, 1.1390e+01,
  8.1900e+00, 5.1300e+00, 5.1963e+02, 5.1798e+02, 5.1690e+02, 5.1580e+02,
  5.1493e+02, 5.1372e+02, 5.1232e+02, 5.2045e+02, 5.1728e+02, 5.1607e+02,
  2.7700e+00, 0.0000e+00, 3.0100e+00],
 [6.7125e+02, 6.2704e+02, 6.2737e+02, 6.2784e+02, 6.2832e+02, 6.2872e+02,
  6.2923e+02, 6.2981e+02, 6.3026e+02, 6.2544e+02, 6.2643e+02, 1.4400e+01,
  1.1190e+01, 8.1300e+00, 5.1787e+02, 5.1623e+02, 5.1515e+02, 5.1405e+02,
  5.1317e+02, 5.1196e+02, 5.1056e+02, 5.1868e+02, 5.1552e+02, 5.1431e+02,
  5.7800e+00, 3.0100e+00, 0.0000e+00],
    ] 
    data['num_vehicles'] = 1
    data['depot'] = 0
    return data

def print_solution(manager, routing, solution):
    print('Objective: {} kilometers'.format(solution.ObjectiveValue()))
    index = routing.Start(0)
    plan_output = 'Route for vehicle 0:\n'
    route_distance = 0
    while not routing.IsEnd(index):
        plan_output += ' {} ->'.format(manager.IndexToNode(index))
        previous_index = index
        index = solution.Value(routing.NextVar(index))
        route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)
    plan_output += ' {}\n'.format(manager.IndexToNode(index))
    print(plan_output)
    plan_output += 'Route distance: {}miles\n'.format(route_distance)

def main():
    data = create_data_model()

    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),
                                           data['num_vehicles'], data['depot'])

    routing = pywrapcp.RoutingModel(manager)

    def distance_callback(from_index, to_index):
        # Returns the distance between the two nodes
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

    solution = routing.SolveWithParameters(search_parameters)

    if solution:
        print_solution(manager, routing, solution)


if __name__ == '__main__':
    main()