# CVRP application for creating a planning for a VAR for one day for 5 vans with a previously calaculated distance matrix
# Jobs that need two workers are added to the same route

from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
import numpy as np
import json
import GUI as GUI
from GUI import *
import tkinter as tk

def convert_time(min):
    hour = min // 60
    minutes = min % 60
    return "%02dh%02dm" % (hour, minutes) 

def jsonToData(file='JsonExport_MVDH.json', datasetName='MVdH_dataset'):
    with open(file, 'r') as f:
        datasetsdict = json.load(f)
    jsondata = datasetsdict[datasetName]
    
    return jsondata

data_j = jsonToData()

veh1_N = submit_veh1()
veh2_N = submit_veh2()
veh3_N = submit_veh3()
veh4_N = submit_veh4()
veh5_N = submit_veh5()
veh6_N = submit_veh6()

def create_data_model():
    data = {}
    data['distance_matrix'] = [
    [0, 40, 14, 11, 13, 17, 14, 18, 96, 96, 19, 10, 46, 9, 19, 35, 17, 14, 42, 44, 10, 12, 42, 73, 7, 6, 29, 12, 13, 16, 26, 72, 19, 5, 44, 17, 29, 34, 30, 31, 10, 36, 15, 6, 8, 8, 12, 36, 13, 83, 28, 17, 10, 3, 11, 44, 16, 10, 27, 36, 12, 19, 19, 31, 16, 23, 17, 12, 9, 8, 8, 7, 23, 31, 29, 7, 16, 25, 43, 30, 12, 43, 7], 
    [43, 0, 49, 39, 49, 53, 42, 46, 75, 74, 55, 44, 24, 44, 53, 15, 53, 47, 70, 31, 38, 46, 66, 59, 44, 46, 63, 46, 47, 49, 32, 50, 42, 40, 60, 45, 35, 21, 37, 64, 44, 16, 50, 42, 40, 40, 45, 70, 41, 62, 62, 52, 38, 44, 45, 29, 52, 43, 63, 71, 46, 53, 54, 44, 50, 48, 50, 47, 40, 41, 41, 44, 57, 58, 51, 43, 49, 53, 29, 46, 45, 20, 43], 
    [16, 49, 0, 22, 22, 15, 26, 30, 108, 108, 18, 14, 58, 11, 29, 47, 19, 21, 51, 47, 22, 20, 51, 85, 16, 16, 39, 19, 21, 26, 38, 84, 31, 16, 56, 29, 39, 46, 37, 41, 18, 48, 1, 17, 19, 19, 20, 46, 16, 95, 38, 10, 22, 16, 22, 56, 28, 20, 32, 46, 20, 30, 13, 42, 11, 17, 11, 7, 19, 19, 19, 14, 34, 43, 41, 19, 10, 15, 47, 20, 15, 50, 18], 
    [14, 39, 21, 0, 21, 25, 7, 11, 95, 95, 27, 16, 45, 16, 20, 34, 25, 19, 43, 51, 2, 18, 46, 72, 16, 18, 35, 18, 19, 21, 25, 71, 12, 12, 37, 10, 28, 33, 29, 36, 16, 35, 22, 11, 12, 11, 17, 42, 20, 82, 32, 24, 1, 15, 17, 43, 19, 15, 35, 41, 17, 25, 26, 24, 23, 30, 24, 19, 7, 10, 10, 16, 29, 24, 22, 15, 23, 32, 50, 37, 17, 42, 14], 
    [18, 48, 19, 19, 0, 12, 22, 27, 105, 104, 14, 18, 54, 19, 23, 44, 11, 12, 45, 54, 19, 9, 46, 82, 16, 22, 33, 16, 9, 15, 34, 81, 28, 12, 52, 25, 37, 43, 39, 30, 14, 45, 19, 16, 13, 18, 9, 36, 23, 92, 32, 15, 19, 20, 9, 53, 22, 9, 22, 40, 9, 17, 13, 39, 26, 33, 26, 22, 18, 18, 18, 18, 23, 39, 37, 13, 26, 27, 53, 29, 15, 51, 15], 
    [21, 54, 13, 24, 14, 0, 28, 32, 110, 110, 8, 18, 60, 16, 29, 49, 9, 24, 51, 53, 24, 20, 51, 87, 20, 21, 38, 19, 21, 20, 40, 86, 33, 17, 57, 31, 43, 48, 42, 36, 18, 50, 13, 21, 19, 24, 20, 42, 20, 97, 38, 7, 24, 21, 15, 58, 27, 14, 22, 46, 20, 24, 5, 44, 21, 29, 21, 17, 24, 23, 23, 19, 29, 44, 43, 19, 20, 21, 52, 23, 15, 55, 21], 
    [17, 42, 24, 6, 24, 28, 0, 4, 98, 98, 30, 19, 48, 19, 20, 37, 28, 22, 36, 54, 6, 20, 38, 75, 19, 21, 30, 21, 22, 24, 28, 74, 6, 15, 30, 7, 30, 36, 32, 39, 19, 38, 25, 14, 15, 14, 20, 45, 23, 85, 27, 27, 6, 18, 20, 46, 19, 18, 38, 35, 20, 28, 29, 17, 26, 33, 27, 22, 10, 13, 13, 19, 32, 17, 15, 18, 26, 35, 53, 40, 20, 45, 17], 
    [21, 44, 29, 11, 29, 33, 5, 0, 101, 100, 35, 23, 50, 24, 17, 40, 32, 27, 34, 58, 11, 25, 35, 77, 24, 25, 27, 26, 26, 29, 31, 77, 6, 19, 27, 5, 32, 39, 33, 44, 24, 41, 30, 19, 20, 19, 25, 50, 28, 88, 24, 32, 11, 23, 25, 49, 19, 23, 43, 32, 25, 32, 34, 18, 31, 38, 31, 27, 15, 17, 17, 23, 37, 14, 14, 23, 31, 40, 58, 45, 25, 48, 22], 
    [100, 72, 105, 95, 106, 109, 98, 102, 0, 19, 111, 100, 63, 101, 110, 71, 109, 104, 107, 94, 95, 102, 104, 69, 100, 102, 119, 102, 103, 106, 89, 41, 99, 96, 98, 101, 92, 77, 93, 121, 101, 74, 107, 98, 96, 96, 102, 126, 104, 28, 118, 108, 95, 100, 101, 74, 108, 100, 120, 108, 102, 109, 110, 100, 108, 114, 108, 104, 96, 97, 97, 100, 113, 115, 105, 99, 107, 113, 87, 105, 102, 84, 99], 
    [98, 70, 103, 93, 104, 108, 96, 100, 19, 0, 110, 98, 61, 99, 108, 69, 107, 102, 105, 92, 93, 100, 102, 67, 99, 100, 117, 101, 101, 104, 87, 39, 97, 94, 96, 99, 90, 75, 91, 119, 99, 72, 105, 97, 95, 94, 100, 125, 103, 27, 117, 106, 93, 98, 100, 72, 106, 98, 118, 106, 100, 107, 109, 98, 106, 113, 106, 102, 94, 96, 96, 98, 112, 113, 103, 97, 106, 111, 85, 103, 100, 82, 97], 
    [25, 55, 17, 26, 16, 8, 29, 34, 112, 111, 0, 23, 61, 20, 30, 51, 7, 26, 53, 49, 26, 23, 53, 89, 23, 25, 40, 23, 23, 22, 41, 88, 35, 19, 59, 32, 44, 50, 46, 38, 19, 52, 18, 23, 20, 25, 23, 41, 25, 99, 39, 11, 26, 25, 16, 60, 29, 16, 19, 47, 23, 25, 9, 46, 25, 28, 25, 21, 25, 25, 25, 23, 30, 46, 44, 20, 24, 18, 49, 20, 20, 58, 22], 
    [9, 44, 12, 15, 18, 20, 18, 23, 101, 100, 23, 0, 50, 8, 24, 40, 21, 17, 46, 42, 15, 16, 46, 78, 11, 7, 34, 16, 17, 20, 30, 77, 24, 9, 48, 21, 33, 39, 32, 35, 14, 41, 13, 10, 12, 12, 15, 41, 11, 88, 33, 15, 15, 9, 15, 49, 21, 14, 32, 41, 15, 24, 17, 35, 15, 21, 15, 11, 12, 12, 12, 3, 28, 35, 33, 11, 14, 23, 42, 28, 15, 45, 11], 
    [47, 20, 53, 43, 53, 57, 46, 49, 58, 58, 59, 48, 0, 48, 57, 18, 57, 51, 74, 41, 42, 50, 70, 52, 48, 50, 67, 50, 51, 53, 36, 34, 46, 44, 64, 49, 39, 25, 41, 68, 48, 21, 54, 46, 44, 44, 49, 74, 52, 45, 66, 56, 42, 47, 49, 20, 56, 47, 67, 75, 49, 57, 58, 48, 55, 62, 56, 51, 44, 45, 45, 48, 61, 62, 55, 47, 55, 60, 35, 53, 49, 32, 46], 
    [10, 42, 9, 16, 18, 16, 19, 24, 102, 101, 19, 7, 51, 0, 23, 41, 20, 15, 45, 40, 16, 13, 45, 79, 9, 9, 32, 14, 14, 20, 31, 78, 25, 10, 50, 22, 28, 40, 26, 35, 12, 42, 10, 11, 13, 13, 13, 41, 5, 89, 32, 12, 16, 10, 15, 50, 21, 14, 32, 40, 13, 23, 14, 36, 10, 17, 11, 7, 13, 13, 13, 7, 28, 36, 34, 12, 10, 20, 40, 25, 13, 44, 12], 
    [24, 52, 27, 20, 24, 28, 20, 17, 109, 108, 30, 23, 58, 22, 0, 47, 28, 22, 33, 56, 20, 20, 34, 75, 19, 23, 21, 21, 22, 17, 38, 84, 23, 18, 32, 14, 41, 47, 43, 34, 19, 48, 28, 20, 18, 23, 20, 49, 25, 96, 20, 30, 20, 21, 22, 56, 4, 19, 39, 28, 20, 27, 30, 34, 29, 35, 29, 25, 22, 20, 20, 23, 36, 19, 27, 14, 29, 38, 56, 43, 20, 55, 21], 
    [40, 16, 46, 36, 46, 50, 39, 42, 73, 72, 52, 41, 22, 41, 50, 0, 50, 44, 67, 43, 35, 43, 63, 56, 41, 43, 60, 43, 44, 46, 29, 48, 39, 37, 57, 42, 32, 18, 34, 61, 41, 11, 47, 39, 37, 37, 42, 67, 45, 60, 59, 49, 35, 40, 42, 25, 49, 40, 60, 68, 42, 50, 51, 41, 48, 55, 49, 44, 37, 38, 38, 41, 54, 55, 48, 40, 48, 57, 41, 57, 42, 20, 40], 
    [23, 54, 18, 24, 15, 9, 28, 32, 110, 110, 6, 24, 60, 21, 29, 49, 0, 24, 51, 55, 24, 21, 51, 87, 22, 26, 38, 24, 21, 20, 40, 86, 33, 17, 57, 31, 43, 48, 44, 36, 18, 50, 19, 21, 19, 24, 21, 42, 26, 97, 38, 12, 24, 23, 15, 58, 27, 14, 19, 46, 21, 24, 10, 45, 26, 34, 26, 22, 24, 23, 23, 24, 29, 44, 43, 19, 25, 23, 54, 26, 21, 57, 21], 
    [17, 48, 20, 19, 18, 21, 22, 27, 105, 104, 23, 16, 54, 15, 23, 44, 21, 0, 45, 49, 19, 11, 45, 82, 12, 16, 32, 12, 12, 20, 34, 81, 28, 14, 52, 25, 37, 43, 39, 35, 13, 44, 21, 16, 13, 19, 10, 41, 18, 92, 32, 21, 19, 14, 15, 53, 21, 14, 32, 40, 11, 23, 23, 39, 22, 28, 23, 18, 18, 18, 18, 16, 28, 39, 37, 16, 22, 31, 49, 36, 11, 51, 15], 
    [47, 71, 49, 41, 47, 51, 34, 31, 107, 106, 53, 46, 77, 45, 34, 66, 51, 45, 0, 79, 41, 43, 9, 55, 42, 46, 19, 44, 44, 39, 59, 86, 33, 41, 11, 32, 62, 68, 63, 49, 42, 67, 51, 42, 40, 46, 43, 72, 48, 93, 22, 52, 40, 44, 45, 67, 35, 41, 61, 8, 43, 45, 53, 30, 52, 58, 52, 48, 46, 45, 45, 46, 59, 20, 25, 43, 52, 61, 78, 66, 43, 76, 44], 
    [43, 29, 43, 49, 50, 50, 52, 57, 89, 88, 47, 40, 38, 38, 55, 40, 53, 47, 77, 0, 48, 45, 77, 83, 41, 42, 64, 46, 47, 52, 58, 65, 58, 43, 82, 55, 53, 46, 50, 67, 44, 41, 44, 44, 45, 45, 45, 68, 35, 76, 64, 46, 49, 43, 48, 49, 53, 46, 57, 72, 45, 56, 48, 69, 44, 42, 44, 41, 46, 46, 46, 40, 60, 69, 67, 45, 43, 39, 18, 32, 45, 47, 45], 
    [14, 38, 20, 2, 21, 24, 7, 11, 95, 94, 26, 15, 44, 16, 20, 33, 24, 19, 43, 50, 0, 17, 46, 71, 15, 17, 34, 17, 18, 20, 24, 70, 13, 11, 37, 10, 27, 32, 28, 36, 16, 34, 22, 11, 11, 11, 16, 41, 19, 82, 32, 23, 1, 15, 16, 42, 20, 15, 35, 41, 17, 24, 25, 24, 23, 29, 23, 19, 8, 10, 10, 15, 28, 24, 22, 14, 22, 32, 50, 37, 17, 41, 14], 
    [16, 46, 17, 17, 13, 19, 20, 24, 103, 102, 21, 14, 52, 13, 20, 41, 20, 7, 43, 47, 16, 0, 43, 79, 10, 15, 30, 9, 3, 17, 32, 78, 26, 12, 50, 23, 35, 40, 36, 33, 7, 42, 19, 13, 11, 19, 1, 38, 16, 90, 29, 17, 16, 13, 14, 50, 19, 11, 29, 37, 3, 21, 19, 37, 20, 26, 20, 16, 16, 15, 15, 16, 25, 36, 35, 14, 20, 29, 46, 34, 8, 49, 11], 
    [47, 67, 50, 44, 48, 51, 38, 34, 103, 103, 53, 46, 73, 45, 34, 63, 51, 45, 9, 79, 44, 44, 0, 49, 42, 46, 20, 44, 45, 39, 62, 83, 37, 42, 11, 36, 65, 65, 66, 50, 42, 64, 51, 43, 40, 46, 43, 72, 48, 89, 22, 53, 44, 44, 45, 63, 35, 42, 62, 6, 44, 45, 53, 33, 52, 59, 53, 48, 47, 45, 45, 46, 59, 23, 28, 42, 52, 61, 79, 66, 43, 78, 45], 
    [76, 58, 81, 71, 82, 86, 72, 74, 66, 65, 88, 76, 53, 77, 78, 53, 85, 80, 55, 85, 71, 78, 50, 0, 76, 78, 63, 78, 79, 76, 65, 51, 70, 72, 50, 77, 68, 55, 69, 75, 77, 54, 83, 75, 72, 72, 78, 88, 80, 52, 65, 84, 71, 76, 78, 54, 78, 76, 96, 51, 78, 80, 87, 62, 84, 91, 84, 80, 72, 74, 74, 76, 89, 65, 64, 75, 84, 93, 78, 96, 78, 68, 75], 
    [9, 45, 15, 16, 14, 18, 19, 23, 102, 101, 20, 11, 51, 10, 19, 40, 18, 11, 41, 44, 15, 10, 42, 78, 0, 7, 29, 10, 11, 16, 31, 77, 24, 11, 49, 22, 34, 39, 34, 32, 8, 41, 16, 11, 10, 12, 10, 37, 13, 88, 28, 18, 15, 6, 12, 49, 18, 10, 28, 36, 10, 20, 20, 36, 17, 23, 17, 13, 13, 12, 12, 8, 24, 35, 34, 12, 17, 26, 43, 31, 9, 47, 10], 
    [9, 46, 14, 17, 19, 21, 20, 24, 103, 102, 24, 5, 52, 9, 25, 41, 23, 17, 47, 44, 16, 16, 47, 79, 7, 0, 34, 16, 17, 22, 32, 78, 26, 11, 50, 23, 35, 40, 33, 37, 14, 42, 15, 10, 13, 11, 16, 43, 12, 90, 34, 17, 16, 5, 17, 50, 23, 16, 34, 42, 16, 25, 19, 37, 16, 23, 17, 12, 12, 12, 12, 3, 29, 37, 35, 13, 16, 25, 43, 30, 15, 47, 11], 
    [34, 62, 37, 35, 35, 39, 30, 27, 119, 119, 41, 33, 69, 33, 21, 58, 38, 33, 19, 67, 35, 31, 19, 61, 29, 33, 0, 31, 32, 27, 49, 95, 31, 29, 25, 27, 52, 57, 53, 37, 30, 59, 38, 30, 27, 34, 31, 60, 36, 106, 8, 40, 35, 32, 33, 67, 23, 29, 49, 14, 31, 32, 40, 33, 40, 46, 40, 36, 32, 32, 32, 33, 48, 17, 28, 29, 39, 48, 66, 54, 31, 65, 32], 
    [17, 49, 20, 20, 19, 19, 23, 28, 106, 105, 23, 17, 55, 17, 24, 45, 22, 14, 46, 50, 20, 11, 46, 83, 11, 16, 33, 0, 12, 21, 35, 82, 29, 16, 53, 26, 38, 44, 40, 36, 13, 45, 18, 19, 14, 20, 11, 42, 20, 93, 33, 16, 20, 15, 16, 54, 22, 15, 33, 41, 11, 24, 18, 40, 24, 30, 24, 20, 19, 19, 19, 17, 28, 40, 38, 18, 23, 30, 50, 35, 1, 52, 14], 
    [15, 46, 18, 17, 15, 20, 21, 25, 103, 103, 22, 14, 53, 14, 21, 42, 19, 3, 43, 48, 17, 2, 43, 80, 10, 14, 31, 10, 0, 18, 33, 79, 26, 13, 50, 24, 36, 41, 37, 33, 10, 43, 19, 14, 11, 18, 3, 39, 17, 90, 30, 20, 17, 13, 14, 51, 20, 12, 30, 38, 2, 22, 21, 37, 21, 27, 21, 17, 16, 16, 16, 14, 26, 37, 36, 14, 20, 29, 47, 34, 9, 49, 13], 
    [19, 49, 25, 20, 18, 21, 23, 27, 106, 105, 23, 20, 55, 20, 16, 44, 21, 22, 38, 54, 19, 19, 38, 78, 17, 21, 26, 19, 19, 0, 35, 81, 28, 15, 44, 26, 38, 43, 39, 29, 15, 45, 26, 16, 14, 20, 19, 39, 24, 92, 25, 25, 19, 19, 13, 53, 14, 8, 32, 33, 19, 14, 23, 40, 28, 34, 28, 23, 19, 18, 18, 20, 25, 32, 38, 16, 27, 36, 54, 39, 18, 52, 19], 
    [30, 34, 35, 25, 36, 39, 28, 32, 91, 90, 42, 30, 40, 31, 40, 29, 39, 34, 59, 61, 25, 32, 62, 67, 30, 32, 49, 32, 33, 36, 0, 66, 29, 26, 51, 31, 15, 24, 17, 51, 31, 30, 37, 28, 26, 26, 32, 57, 34, 77, 48, 38, 25, 30, 32, 38, 38, 30, 50, 57, 32, 39, 40, 30, 38, 45, 38, 34, 26, 27, 27, 30, 43, 45, 37, 29, 37, 47, 59, 52, 32, 20, 29], 
    [75, 47, 80, 70, 81, 84, 73, 77, 39, 38, 86, 75, 38, 76, 85, 46, 84, 79, 91, 69, 70, 77, 88, 52, 75, 77, 94, 77, 78, 81, 64, 0, 74, 71, 81, 76, 67, 52, 68, 96, 76, 49, 82, 73, 71, 71, 77, 101, 79, 26, 93, 83, 70, 75, 76, 49, 83, 75, 95, 92, 77, 84, 85, 75, 83, 89, 83, 79, 71, 72, 72, 75, 88, 90, 82, 74, 82, 88, 62, 80, 77, 59, 74], 
    [22, 41, 29, 11, 29, 33, 5, 6, 98, 98, 35, 23, 48, 24, 22, 37, 32, 27, 37, 58, 11, 25, 38, 74, 24, 26, 32, 26, 26, 29, 28, 74, 0, 19, 30, 11, 29, 36, 31, 44, 24, 38, 30, 19, 20, 19, 25, 50, 28, 85, 29, 32, 11, 23, 25, 46, 24, 23, 43, 37, 25, 32, 34, 15, 31, 38, 31, 27, 15, 17, 17, 24, 37, 18, 13, 23, 31, 40, 58, 45, 25, 45, 22], 
    [10, 40, 15, 11, 12, 16, 14, 18, 97, 96, 18, 10, 46, 10, 18, 35, 16, 14, 42, 45, 10, 13, 42, 73, 10, 10, 29, 12, 14, 16, 26, 72, 20, 0, 41, 17, 29, 34, 30, 31, 9, 36, 16, 7, 4, 10, 13, 36, 14, 84, 28, 18, 10, 9, 10, 44, 14, 10, 26, 36, 13, 19, 18, 31, 17, 24, 18, 13, 9, 9, 9, 10, 23, 28, 29, 4, 17, 26, 44, 31, 12, 43, 5], 
    [48, 61, 55, 36, 52, 56, 30, 27, 98, 97, 58, 50, 67, 51, 32, 57, 56, 52, 11, 85, 37, 53, 11, 51, 50, 51, 25, 51, 54, 45, 51, 77, 28, 41, 0, 28, 54, 59, 56, 55, 49, 58, 57, 44, 39, 45, 53, 75, 54, 84, 27, 58, 36, 49, 50, 57, 34, 49, 66, 13, 53, 51, 58, 22, 58, 65, 58, 54, 41, 41, 41, 50, 62, 16, 17, 39, 57, 67, 85, 72, 50, 67, 45], 
    [19, 45, 27, 10, 28, 31, 7, 6, 102, 101, 33, 22, 51, 23, 14, 40, 31, 26, 35, 57, 10, 24, 36, 78, 22, 25, 27, 24, 25, 28, 31, 77, 11, 18, 29, 0, 34, 39, 36, 43, 23, 41, 29, 16, 16, 18, 24, 48, 26, 89, 24, 30, 9, 22, 23, 49, 14, 22, 42, 33, 24, 31, 32, 23, 30, 36, 30, 26, 13, 15, 15, 22, 35, 16, 18, 18, 29, 39, 57, 44, 24, 48, 21], 
    [31, 36, 37, 26, 37, 41, 29, 32, 92, 92, 43, 31, 42, 28, 41, 31, 40, 35, 64, 55, 26, 33, 63, 69, 32, 33, 50, 33, 34, 37, 15, 68, 29, 27, 54, 32, 0, 30, 3, 52, 32, 32, 38, 30, 27, 27, 33, 58, 28, 79, 50, 40, 26, 31, 33, 40, 39, 31, 51, 58, 33, 40, 42, 32, 37, 34, 38, 35, 27, 29, 29, 31, 44, 45, 39, 30, 37, 48, 55, 45, 33, 24, 30], 
    [38, 22, 44, 33, 44, 48, 37, 40, 79, 78, 50, 39, 28, 39, 48, 17, 48, 42, 67, 49, 33, 40, 64, 56, 39, 41, 58, 41, 42, 44, 23, 54, 37, 35, 58, 40, 30, 0, 31, 59, 39, 18, 45, 37, 35, 35, 40, 65, 43, 65, 57, 47, 33, 38, 40, 27, 47, 38, 58, 65, 40, 48, 49, 38, 46, 53, 46, 42, 34, 36, 36, 39, 52, 53, 46, 38, 46, 55, 47, 60, 40, 16, 37], 
    [32, 37, 35, 28, 38, 42, 31, 34, 94, 93, 44, 32, 43, 26, 42, 33, 42, 36, 66, 53, 27, 35, 64, 71, 33, 32, 52, 35, 36, 38, 17, 70, 30, 29, 55, 34, 2, 32, 0, 53, 33, 33, 36, 32, 29, 28, 34, 59, 26, 81, 51, 38, 27, 32, 34, 42, 41, 32, 52, 59, 34, 42, 40, 33, 36, 33, 36, 33, 29, 30, 30, 32, 46, 47, 41, 32, 35, 46, 52, 43, 34, 24, 32], 
    [36, 65, 41, 36, 33, 38, 39, 44, 122, 121, 40, 36, 71, 37, 34, 61, 37, 38, 48, 71, 36, 36, 48, 76, 35, 39, 36, 37, 37, 29, 51, 98, 45, 31, 54, 42, 54, 60, 56, 0, 32, 61, 43, 33, 30, 36, 37, 33, 40, 109, 35, 42, 36, 36, 29, 70, 35, 26, 37, 43, 36, 22, 40, 56, 44, 50, 44, 40, 35, 35, 35, 36, 19, 46, 54, 34, 43, 51, 71, 54, 36, 68, 35], 
    [14, 44, 16, 15, 13, 16, 18, 22, 100, 100, 18, 12, 50, 12, 18, 39, 16, 12, 40, 46, 14, 8, 41, 77, 9, 12, 28, 11, 9, 15, 30, 76, 23, 9, 48, 21, 33, 38, 34, 31, 0, 40, 18, 11, 9, 15, 7, 36, 15, 87, 27, 19, 14, 11, 10, 48, 17, 9, 27, 35, 8, 19, 18, 35, 19, 25, 19, 15, 14, 13, 13, 13, 23, 35, 33, 10, 19, 28, 45, 34, 10, 47, 11], 
    [41, 17, 47, 37, 47, 51, 40, 44, 74, 73, 53, 42, 23, 42, 51, 10, 51, 45, 68, 44, 36, 44, 64, 57, 42, 44, 61, 44, 45, 47, 30, 50, 40, 38, 58, 43, 33, 19, 35, 62, 42, 0, 48, 40, 38, 38, 43, 68, 46, 61, 60, 50, 36, 41, 43, 19, 50, 41, 61, 69, 43, 51, 52, 42, 50, 56, 50, 45, 38, 39, 39, 42, 55, 56, 49, 41, 49, 58, 42, 58, 43, 26, 41], 
    [17, 50, 1, 23, 21, 15, 26, 31, 109, 108, 18, 14, 58, 12, 30, 48, 19, 22, 52, 48, 23, 20, 52, 86, 16, 16, 39, 18, 21, 27, 38, 85, 32, 17, 56, 29, 40, 47, 38, 42, 19, 48, 0, 18, 20, 19, 20, 48, 16, 96, 38, 10, 23, 17, 22, 57, 28, 21, 32, 46, 20, 30, 12, 43, 12, 18, 12, 8, 20, 20, 20, 14, 34, 43, 41, 19, 11, 16, 47, 21, 15, 51, 19], 
    [5, 43, 15, 11, 18, 21, 14, 19, 100, 99, 23, 10, 49, 11, 22, 39, 21, 16, 44, 45, 11, 15, 45, 77, 11, 11, 32, 15, 16, 18, 29, 76, 20, 6, 45, 17, 32, 38, 33, 33, 13, 39, 17, 0, 5, 7, 14, 39, 15, 87, 31, 18, 11, 8, 14, 48, 19, 12, 32, 39, 14, 22, 21, 31, 18, 25, 18, 14, 4, 3, 3, 12, 26, 31, 29, 9, 18, 27, 45, 32, 14, 46, 10], 
    [9, 41, 16, 12, 15, 19, 15, 19, 98, 97, 21, 11, 47, 11, 17, 36, 19, 15, 45, 46, 11, 13, 43, 74, 11, 13, 30, 13, 14, 17, 27, 73, 20, 4, 39, 17, 30, 35, 31, 32, 12, 37, 17, 5, 0, 11, 13, 37, 15, 84, 29, 19, 11, 11, 12, 45, 14, 11, 30, 37, 13, 20, 21, 32, 18, 25, 19, 14, 8, 6, 6, 11, 24, 26, 30, 4, 18, 27, 45, 32, 13, 44, 8], 
    [5, 41, 16, 12, 19, 22, 15, 19, 98, 97, 25, 11, 47, 12, 25, 37, 22, 19, 47, 46, 11, 17, 47, 75, 12, 11, 35, 18, 18, 21, 27, 74, 21, 10, 45, 18, 30, 36, 28, 36, 15, 38, 17, 6, 10, 0, 17, 42, 15, 85, 34, 19, 11, 9, 16, 46, 22, 15, 33, 42, 17, 24, 21, 32, 19, 25, 19, 14, 6, 5, 5, 11, 29, 32, 30, 12, 18, 27, 45, 32, 17, 44, 12], 
    [17, 47, 19, 18, 13, 19, 21, 25, 104, 103, 21, 15, 53, 14, 21, 42, 19, 5, 44, 48, 17, 2, 44, 80, 11, 16, 31, 10, 2, 18, 33, 79, 27, 13, 51, 24, 36, 41, 37, 34, 8, 43, 20, 14, 12, 20, 0, 39, 17, 91, 30, 18, 17, 14, 15, 51, 20, 12, 29, 38, 2, 22, 19, 38, 21, 27, 21, 17, 17, 16, 16, 17, 26, 38, 36, 15, 21, 30, 47, 36, 10, 50, 12], 
    [42, 71, 47, 42, 39, 44, 46, 50, 128, 128, 41, 42, 78, 43, 47, 67, 44, 46, 69, 71, 42, 43, 69, 88, 44, 45, 57, 47, 43, 39, 58, 104, 51, 38, 75, 49, 60, 66, 62, 32, 39, 68, 48, 39, 36, 43, 43, 0, 47, 115, 56, 48, 42, 42, 35, 76, 45, 32, 34, 64, 43, 31, 46, 62, 50, 50, 50, 46, 41, 41, 41, 43, 23, 62, 60, 40, 50, 40, 71, 42, 47, 74, 41], 
    [13, 39, 13, 19, 20, 21, 23, 27, 105, 105, 24, 10, 54, 4, 25, 44, 24, 17, 47, 37, 19, 16, 48, 82, 12, 12, 35, 16, 17, 22, 35, 81, 28, 13, 53, 26, 28, 43, 26, 38, 14, 45, 14, 14, 16, 16, 15, 43, 0, 92, 34, 16, 19, 13, 18, 53, 24, 16, 34, 42, 16, 26, 18, 39, 13, 15, 13, 12, 16, 16, 16, 10, 30, 40, 37, 15, 12, 24, 36, 30, 15, 40, 15], 
    [85, 57, 91, 80, 91, 95, 84, 87, 28, 28, 97, 85, 48, 86, 95, 56, 94, 89, 92, 79, 80, 87, 88, 53, 86, 88, 104, 88, 88, 91, 74, 24, 84, 81, 82, 87, 77, 62, 78, 106, 86, 59, 92, 84, 82, 82, 87, 112, 90, 0, 104, 94, 80, 85, 87, 59, 93, 85, 105, 93, 87, 94, 96, 85, 93, 100, 93, 89, 81, 83, 83, 86, 99, 97, 90, 85, 93, 98, 73, 91, 87, 70, 84], 
    [33, 61, 36, 32, 33, 37, 27, 24, 118, 117, 39, 32, 67, 31, 20, 56, 37, 31, 18, 65, 32, 29, 18, 60, 28, 32, 5, 30, 31, 25, 47, 93, 29, 27, 24, 24, 50, 56, 52, 35, 28, 57, 37, 29, 26, 32, 29, 58, 34, 105, 0, 39, 31, 30, 31, 65, 21, 28, 48, 13, 29, 31, 39, 31, 38, 44, 38, 34, 33, 31, 31, 32, 45, 15, 26, 28, 38, 47, 64, 52, 29, 64, 31], 
    [18, 51, 10, 24, 17, 8, 27, 31, 110, 109, 11, 15, 59, 12, 30, 48, 11, 21, 52, 49, 23, 17, 53, 86, 17, 17, 40, 16, 18, 24, 39, 85, 32, 18, 57, 30, 40, 47, 38, 40, 21, 49, 10, 18, 21, 20, 17, 46, 17, 96, 39, 0, 23, 17, 19, 57, 29, 18, 25, 47, 17, 28, 5, 44, 17, 25, 17, 13, 21, 20, 20, 15, 33, 44, 42, 20, 17, 21, 48, 26, 12, 52, 20], 
    [13, 38, 20, 1, 21, 25, 6, 11, 95, 94, 27, 15, 44, 16, 19, 34, 24, 19, 43, 50, 1, 17, 46, 72, 16, 17, 35, 18, 18, 21, 24, 71, 12, 11, 37, 9, 27, 33, 29, 36, 16, 34, 22, 10, 12, 11, 17, 42, 20, 82, 32, 23, 0, 15, 17, 43, 19, 15, 35, 40, 17, 24, 26, 23, 23, 30, 23, 19, 7, 9, 9, 15, 28, 23, 21, 14, 23, 32, 50, 37, 17, 41, 14], 
    [6, 42, 14, 13, 16, 20, 17, 21, 99, 99, 22, 8, 49, 10, 22, 38, 19, 15, 44, 44, 13, 15, 45, 76, 5, 5, 32, 15, 16, 18, 29, 75, 22, 7, 47, 20, 32, 37, 33, 33, 12, 39, 16, 7, 12, 9, 14, 39, 13, 86, 31, 17, 13, 0, 14, 47, 19, 12, 30, 39, 14, 22, 20, 33, 17, 24, 17, 13, 9, 9, 9, 6, 26, 34, 32, 9, 16, 26, 44, 31, 14, 45, 10], 
    [16, 46, 22, 17, 15, 18, 20, 24, 103, 102, 21, 17, 52, 18, 23, 41, 18, 20, 45, 52, 16, 16, 45, 79, 18, 19, 32, 21, 17, 12, 32, 79, 26, 12, 50, 23, 35, 41, 37, 29, 12, 42, 24, 14, 11, 17, 17, 35, 21, 90, 32, 23, 17, 17, 0, 51, 21, 6, 29, 40, 16, 17, 20, 37, 25, 31, 25, 21, 16, 16, 16, 17, 22, 37, 35, 14, 24, 34, 52, 36, 20, 49, 17], 
    [48, 27, 54, 44, 55, 58, 47, 51, 68, 68, 60, 49, 16, 50, 58, 24, 58, 52, 69, 51, 43, 51, 66, 59, 49, 51, 68, 51, 52, 54, 38, 44, 47, 45, 60, 50, 40, 28, 42, 70, 49, 19, 55, 47, 45, 45, 50, 75, 53, 55, 67, 57, 44, 49, 50, 0, 57, 48, 69, 70, 51, 58, 59, 49, 57, 63, 57, 53, 45, 46, 46, 49, 62, 63, 56, 48, 56, 65, 45, 63, 50, 40, 48], 
    [23, 50, 25, 20, 23, 27, 20, 19, 107, 107, 29, 21, 57, 21, 4, 46, 26, 21, 33, 55, 20, 19, 34, 76, 17, 21, 21, 19, 20, 15, 37, 83, 25, 14, 34, 15, 40, 45, 41, 34, 18, 47, 26, 19, 14, 22, 19, 48, 24, 94, 20, 28, 19, 20, 21, 55, 0, 17, 37, 28, 19, 25, 28, 36, 28, 34, 28, 24, 19, 17, 17, 21, 35, 21, 29, 10, 27, 36, 54, 42, 19, 53, 17], 
    [14, 44, 20, 15, 10, 14, 18, 22, 100, 100, 16, 14, 50, 15, 19, 39, 14, 15, 41, 50, 14, 12, 42, 77, 13, 17, 29, 17, 12, 10, 30, 76, 23, 8, 47, 21, 33, 38, 34, 26, 7, 40, 21, 11, 9, 15, 12, 31, 19, 87, 28, 18, 14, 14, 6, 48, 18, 0, 25, 36, 11, 14, 16, 35, 22, 29, 22, 18, 14, 13, 13, 15, 18, 34, 33, 10, 22, 30, 49, 32, 16, 47, 12], 
    [32, 63, 31, 34, 24, 22, 37, 42, 120, 119, 18, 33, 69, 34, 38, 58, 19, 33, 60, 59, 34, 30, 61, 96, 31, 35, 48, 37, 30, 30, 49, 96, 43, 27, 67, 40, 52, 58, 54, 38, 27, 59, 31, 31, 28, 33, 30, 34, 37, 107, 47, 25, 34, 33, 24, 68, 37, 24, 0, 55, 30, 27, 22, 54, 39, 38, 39, 34, 33, 33, 33, 33, 25, 54, 52, 28, 38, 28, 59, 30, 34, 66, 30], 
    [41, 69, 44, 40, 42, 46, 35, 32, 107, 107, 48, 40, 75, 40, 28, 65, 45, 40, 8, 73, 40, 38, 6, 50, 36, 40, 14, 38, 39, 34, 56, 87, 36, 36, 13, 32, 58, 64, 60, 44, 36, 66, 45, 37, 34, 40, 37, 67, 43, 93, 17, 47, 40, 39, 39, 67, 30, 36, 56, 0, 38, 39, 47, 33, 47, 53, 47, 42, 42, 39, 39, 40, 53, 22, 27, 36, 46, 55, 73, 60, 38, 72, 39], 
    [16, 46, 18, 17, 13, 19, 20, 25, 103, 102, 21, 14, 52, 13, 21, 42, 20, 5, 43, 47, 17, 0, 43, 80, 10, 15, 30, 10, 2, 18, 32, 79, 26, 13, 50, 23, 35, 41, 37, 33, 8, 42, 20, 14, 11, 20, 2, 39, 16, 90, 30, 17, 17, 14, 14, 51, 19, 12, 30, 38, 0, 21, 19, 37, 20, 26, 21, 16, 16, 16, 16, 16, 26, 37, 35, 15, 20, 29, 47, 34, 9, 49, 11], 
    [23, 53, 29, 23, 19, 24, 27, 31, 109, 109, 26, 24, 59, 24, 25, 48, 24, 27, 44, 59, 23, 24, 45, 80, 25, 26, 32, 29, 24, 14, 39, 85, 32, 19, 50, 30, 42, 47, 43, 22, 20, 49, 30, 20, 17, 24, 24, 32, 28, 96, 31, 28, 23, 23, 16, 57, 23, 13, 28, 39, 24, 0, 26, 43, 31, 38, 32, 27, 22, 22, 22, 24, 19, 39, 42, 21, 31, 40, 58, 42, 28, 56, 22], 
    [19, 52, 11, 25, 15, 4, 28, 32, 111, 110, 7, 16, 60, 13, 30, 49, 8, 22, 52, 50, 24, 18, 52, 87, 18, 18, 39, 17, 19, 21, 40, 87, 34, 18, 58, 31, 41, 49, 39, 37, 19, 50, 11, 20, 20, 21, 18, 43, 18, 98, 39, 4, 25, 19, 16, 59, 28, 15, 22, 47, 18, 24, 0, 45, 18, 26, 18, 14, 22, 22, 22, 16, 30, 45, 43, 20, 18, 21, 49, 23, 13, 53, 21], 
    [33, 44, 40, 23, 40, 44, 16, 18, 101, 100, 46, 35, 50, 36, 34, 40, 44, 38, 31, 71, 23, 37, 34, 66, 35, 37, 34, 37, 38, 40, 30, 77, 14, 31, 23, 22, 33, 39, 35, 56, 35, 41, 41, 30, 31, 31, 36, 61, 39, 88, 33, 43, 22, 35, 36, 49, 36, 34, 55, 33, 37, 44, 45, 0, 43, 49, 43, 38, 27, 29, 29, 35, 48, 22, 9, 34, 42, 51, 70, 56, 36, 46, 34], 
    [15, 48, 10, 21, 22, 17, 24, 28, 107, 106, 20, 12, 56, 8, 27, 45, 21, 20, 49, 46, 20, 18, 50, 83, 14, 14, 37, 18, 19, 25, 36, 82, 30, 15, 54, 27, 35, 44, 33, 40, 16, 46, 10, 15, 18, 17, 17, 45, 11, 94, 36, 12, 20, 14, 20, 54, 26, 19, 34, 44, 18, 28, 14, 41, 0, 14, 5, 2, 18, 17, 17, 12, 32, 41, 39, 17, 4, 20, 45, 25, 17, 49, 17], 
    [24, 48, 17, 30, 31, 29, 33, 37, 116, 115, 29, 21, 65, 17, 36, 54, 33, 28, 58, 46, 29, 26, 58, 92, 22, 23, 45, 26, 27, 33, 45, 91, 38, 24, 63, 36, 34, 53, 32, 48, 25, 55, 18, 24, 26, 26, 26, 50, 15, 102, 44, 24, 29, 23, 28, 63, 34, 27, 38, 52, 26, 36, 26, 50, 12, 0, 12, 14, 27, 26, 26, 21, 40, 50, 48, 26, 10, 18, 45, 16, 26, 48, 26], 
    [18, 48, 12, 24, 26, 20, 27, 32, 110, 109, 23, 15, 59, 11, 30, 49, 24, 23, 53, 46, 24, 21, 53, 87, 17, 17, 40, 21, 22, 28, 39, 86, 33, 18, 57, 30, 38, 48, 36, 43, 20, 49, 12, 19, 21, 20, 21, 49, 12, 97, 39, 15, 24, 18, 23, 58, 29, 22, 37, 47, 21, 31, 18, 44, 3, 12, 0, 5, 21, 21, 21, 15, 35, 44, 42, 20, 2, 22, 46, 26, 20, 50, 20], 
    [14, 47, 7, 20, 21, 16, 23, 27, 106, 105, 19, 11, 55, 9, 26, 44, 20, 19, 48, 45, 19, 17, 49, 82, 13, 13, 36, 17, 18, 24, 35, 81, 29, 14, 53, 26, 37, 43, 35, 39, 16, 45, 8, 14, 17, 16, 16, 44, 13, 93, 35, 11, 19, 13, 19, 53, 25, 18, 33, 43, 17, 27, 13, 40, 5, 14, 5, 0, 17, 16, 16, 11, 31, 40, 38, 16, 4, 20, 44, 25, 16, 48, 16], 
    [6, 40, 17, 7, 20, 24, 11, 15, 97, 96, 26, 12, 46, 12, 21, 35, 23, 19, 47, 47, 7, 17, 48, 73, 13, 12, 34, 17, 18, 21, 26, 72, 16, 8, 41, 13, 29, 34, 30, 36, 16, 36, 18, 3, 7, 6, 16, 41, 16, 83, 34, 20, 7, 9, 16, 44, 18, 15, 34, 42, 17, 24, 22, 28, 19, 26, 20, 15, 0, 2, 2, 12, 28, 28, 26, 10, 19, 28, 46, 33, 17, 43, 12], 
    [6, 41, 17, 9, 19, 23, 13, 17, 98, 97, 25, 12, 47, 12, 19, 37, 22, 17, 47, 47, 9, 16, 46, 75, 13, 12, 33, 16, 17, 19, 28, 74, 18, 7, 41, 15, 30, 36, 32, 35, 14, 38, 18, 3, 6, 6, 15, 40, 16, 85, 34, 20, 9, 9, 15, 46, 17, 13, 33, 40, 16, 23, 22, 29, 19, 26, 20, 15, 2, 0, 0, 12, 27, 28, 27, 9, 19, 28, 46, 33, 15, 44, 12], 
    [6, 41, 17, 9, 19, 23, 13, 17, 98, 97, 25, 12, 47, 12, 19, 37, 22, 17, 47, 47, 9, 16, 46, 75, 13, 12, 33, 16, 17, 19, 28, 74, 18, 7, 41, 15, 30, 36, 32, 35, 14, 38, 18, 3, 6, 6, 15, 40, 16, 85, 34, 20, 9, 9, 15, 46, 17, 13, 33, 40, 16, 23, 22, 29, 19, 26, 20, 15, 2, 0, 0, 12, 27, 28, 27, 9, 19, 28, 46, 33, 15, 44, 12], 
    [9, 44, 12, 15, 17, 19, 18, 22, 101, 100, 22, 3, 50, 8, 24, 39, 21, 17, 46, 42, 14, 15, 46, 77, 8, 4, 33, 17, 16, 20, 30, 76, 24, 9, 48, 21, 33, 38, 32, 35, 14, 40, 13, 9, 12, 11, 15, 41, 10, 88, 32, 15, 14, 6, 15, 48, 21, 14, 32, 41, 15, 23, 17, 35, 14, 21, 15, 10, 12, 11, 11, 0, 27, 35, 33, 11, 14, 23, 41, 28, 16, 45, 11], 
    [30, 60, 36, 31, 27, 30, 34, 38, 117, 116, 32, 31, 66, 32, 35, 55, 30, 34, 57, 66, 30, 31, 58, 90, 32, 33, 45, 36, 32, 27, 46, 92, 40, 26, 64, 37, 49, 54, 50, 20, 27, 56, 37, 27, 25, 31, 32, 22, 35, 104, 44, 34, 30, 31, 23, 64, 34, 21, 25, 52, 31, 20, 32, 51, 39, 45, 39, 34, 30, 30, 30, 31, 0, 51, 49, 29, 38, 39, 65, 42, 35, 63, 30], 
    [35, 57, 43, 24, 40, 44, 18, 14, 114, 113, 46, 38, 63, 39, 19, 53, 43, 37, 21, 71, 24, 36, 23, 67, 34, 39, 17, 36, 37, 31, 43, 90, 16, 29, 16, 16, 45, 52, 46, 46, 34, 54, 45, 32, 27, 32, 35, 63, 41, 98, 17, 46, 24, 37, 38, 62, 22, 34, 54, 21, 36, 39, 46, 21, 46, 51, 46, 42, 29, 29, 29, 38, 49, 0, 13, 27, 45, 55, 71, 60, 35, 61, 32], 
    [31, 52, 38, 21, 39, 42, 14, 13, 105, 104, 44, 33, 58, 34, 27, 47, 42, 37, 26, 68, 21, 35, 29, 67, 33, 35, 28, 35, 36, 39, 37, 84, 12, 29, 18, 18, 41, 46, 42, 54, 34, 48, 40, 28, 29, 29, 35, 60, 37, 91, 28, 41, 21, 33, 34, 56, 29, 33, 53, 28, 35, 42, 43, 9, 41, 48, 41, 37, 25, 27, 27, 33, 46, 13, 0, 33, 40, 50, 68, 55, 35, 54, 32], 
    [13, 44, 19, 15, 15, 18, 18, 24, 101, 100, 21, 14, 50, 14, 15, 39, 18, 18, 42, 49, 14, 15, 43, 77, 13, 14, 30, 16, 16, 16, 30, 76, 23, 5, 39, 18, 33, 38, 34, 35, 10, 40, 20, 9, 4, 14, 15, 40, 18, 87, 29, 22, 14, 13, 12, 48, 10, 11, 29, 37, 15, 23, 20, 35, 21, 28, 22, 17, 11, 9, 9, 14, 27, 26, 34, 0, 21, 30, 48, 35, 16, 47, 8], 
    [17, 48, 11, 23, 25, 20, 27, 31, 109, 109, 23, 15, 59, 11, 30, 48, 24, 22, 52, 46, 23, 21, 52, 86, 17, 17, 40, 21, 22, 27, 39, 85, 32, 17, 57, 30, 37, 47, 35, 42, 19, 49, 11, 18, 20, 20, 20, 48, 11, 96, 39, 15, 23, 17, 23, 57, 29, 21, 37, 47, 20, 31, 17, 44, 3, 11, 2, 4, 20, 20, 20, 15, 35, 44, 42, 20, 0, 21, 45, 25, 20, 49, 19], 
    [27, 54, 16, 33, 31, 22, 36, 40, 114, 113, 18, 24, 63, 21, 39, 57, 23, 31, 61, 43, 32, 30, 62, 95, 26, 26, 49, 29, 31, 36, 48, 89, 41, 26, 66, 39, 49, 56, 47, 52, 28, 58, 17, 27, 30, 29, 30, 39, 26, 100, 48, 20, 32, 26, 31, 66, 38, 30, 27, 56, 30, 39, 22, 53, 24, 19, 24, 22, 30, 29, 29, 24, 40, 53, 51, 29, 23, 0, 42, 13, 25, 61, 29], 
    [46, 30, 45, 52, 53, 53, 55, 59, 89, 88, 50, 43, 38, 41, 58, 41, 55, 50, 80, 20, 51, 48, 80, 83, 44, 45, 67, 49, 49, 55, 59, 64, 60, 46, 85, 58, 56, 47, 53, 70, 47, 43, 47, 46, 48, 48, 48, 71, 38, 76, 66, 48, 51, 45, 50, 49, 56, 49, 59, 75, 48, 58, 51, 70, 47, 45, 47, 44, 49, 48, 48, 43, 63, 72, 70, 48, 46, 42, 0, 34, 48, 49, 48], 
    [31, 46, 20, 37, 32, 23, 40, 44, 106, 105, 19, 28, 55, 25, 43, 58, 24, 35, 65, 35, 36, 34, 66, 99, 30, 30, 53, 33, 36, 37, 52, 82, 46, 31, 70, 43, 44, 60, 42, 53, 32, 59, 21, 31, 34, 33, 34, 40, 29, 93, 52, 25, 36, 30, 32, 66, 42, 31, 28, 60, 34, 40, 23, 57, 26, 15, 26, 26, 34, 33, 33, 28, 41, 57, 55, 33, 24, 10, 35, 0, 29, 57, 33], 
    [16, 48, 18, 18, 17, 17, 22, 26, 104, 104, 22, 16, 54, 16, 22, 43, 21, 12, 44, 49, 18, 9, 45, 81, 9, 15, 32, 3, 11, 19, 34, 80, 27, 14, 51, 25, 37, 42, 38, 34, 12, 44, 17, 17, 13, 19, 9, 40, 18, 91, 31, 15, 18, 13, 15, 52, 21, 13, 31, 39, 9, 23, 16, 38, 22, 28, 23, 18, 18, 17, 17, 16, 27, 38, 37, 16, 22, 29, 49, 34, 0, 51, 13], 
    [47, 20, 50, 42, 53, 57, 45, 49, 84, 84, 59, 47, 34, 46, 57, 20, 56, 51, 76, 49, 42, 49, 76, 69, 48, 49, 66, 49, 50, 53, 20, 60, 45, 43, 68, 48, 25, 17, 25, 68, 48, 27, 52, 46, 44, 43, 49, 74, 43, 71, 66, 53, 42, 47, 49, 40, 55, 47, 67, 74, 49, 56, 56, 46, 52, 50, 52, 49, 43, 45, 45, 47, 60, 61, 53, 46, 51, 62, 47, 58, 49, 0, 46], 
    [11, 44, 19, 15, 14, 18, 18, 23, 101, 100, 20, 15, 50, 15, 21, 40, 18, 14, 45, 49, 15, 12, 45, 78, 8, 11, 32, 13, 13, 18, 30, 77, 24, 5, 44, 21, 33, 39, 35, 34, 11, 41, 21, 10, 8, 14, 11, 40, 18, 88, 31, 21, 15, 10, 12, 49, 17, 12, 28, 39, 12, 22, 20, 35, 22, 28, 22, 18, 12, 12, 12, 12, 26, 31, 33, 7, 21, 31, 48, 36, 12, 47, 0]
    ]
    data['demands'] = [x['Service'] for x in data_j]
    data['time_matrix'] = np.array(data['distance_matrix']) + data['demands']
    data['num_vehicles'] = 30
    data['num_nodes'] = len(data['demands'])
    data['depot'] = 0
    data['nodes'] = [x['Name'] for x in data_j]

    data['vehicle_capacities'] = []
    for i in range(data['num_vehicles']):
        data['veh_cap'] = data['vehicle_capacities'].append(600)
    
    data['starts'] = [int(veh1_N), int(veh1_N), int(veh1_N), int(veh1_N), int(veh1_N), int(veh2_N), int(veh2_N), int(veh2_N), int(veh2_N), int(veh2_N), int(veh3_N), int(veh3_N), int(veh3_N), int(veh3_N), int(veh3_N), int(veh4_N), int(veh4_N), int(veh4_N), int(veh4_N), int(veh4_N), int(veh5_N), int(veh5_N), int(veh5_N), int(veh5_N), int(veh5_N), int(veh6_N), int(veh6_N), int(veh6_N), int(veh6_N), int(veh6_N)]
    data['ends'] = [int(veh1_N), int(veh1_N), int(veh1_N), int(veh1_N), int(veh1_N), int(veh2_N), int(veh2_N), int(veh2_N), int(veh2_N), int(veh2_N), int(veh3_N), int(veh3_N), int(veh3_N), int(veh3_N), int(veh3_N), int(veh4_N), int(veh4_N), int(veh4_N), int(veh4_N), int(veh4_N), int(veh5_N), int(veh5_N), int(veh5_N), int(veh5_N), int(veh5_N), int(veh6_N), int(veh6_N), int(veh6_N), int(veh6_N), int(veh6_N)]
    
    data['2_workers'] = []
    for Customer in data_j:
        if Customer['Workers']==2:
            data['2_w'] = data['2_workers'].append(Customer['Name'])
    
    data['two_workers'] = []
    for node in data['2_workers']:
        data['two_w'] = data['two_workers'].append(data['nodes'].index(node))
    
    return data

def print_solution(data, manager, routing, assignment):
    print(f'Objective: {assignment.ObjectiveValue()}')
    dropped_nodes = 'Dropped nodes:'
    for node in range(routing.Size()):
        if routing.IsStart(node) or routing.IsEnd(node):
            continue
        if assignment.Value(routing.NextVar(node)) == node:
            dropped_nodes += ' {}'.format(manager.IndexToNode(node))
    print(dropped_nodes)

    total_distance = 0
    total_load = 0

    root = tk.Tk()
    root.geometry("1000x1000")
    root.title(" Planning Qurtinz ")
    Result_W = tk.Text(root, bg = "white", font = "Code 18")
    
    for vehicle_id in range(data['num_vehicles']):
        count = 1
        index = routing.Start(vehicle_id)
        plan_output = 'Route voor camionette {} - Starttijd 08h30:\n\n'.format(vehicle_id)
        route_distance_min = 510
        route_time_min = 0
        route_load_min = 0
        final_node_index = manager.IndexToNode(index)
        final_node_name = data['nodes'][final_node_index]
        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            from_node = manager.IndexToNode(node_index)
            to_index = assignment.Value(routing.NextVar(index))
            to_node = manager.IndexToNode(to_index)
            node_name = data['nodes'][node_index]
            node_load_min = data['demands'][node_index]
            node_load = convert_time(node_load_min)
            node_time_min = data['distance_matrix'][from_node][to_node]
            node_time = convert_time(node_time_min)
            route_load_min += data['demands'][node_index]
            route_load = convert_time(route_load_min)
            route_time_min += data['distance_matrix'][from_node][to_node]
            route_time = convert_time(route_time_min)
            previous_index = index
            index = assignment.Value(routing.NextVar(index))
            route_distance_min += routing.GetArcCostForVehicle(
                previous_index, index, vehicle_id)
            route_distance = convert_time(route_distance_min)
            route_total_min = route_distance_min - 510
            route_total = convert_time(route_total_min)

            route_total_start_min = route_distance_min
            route_total_start = convert_time(route_total_start_min)
            
            if node_index == 0 or node_index == 1 or node_index == 2 :
                plan_output += 'Vertrek uit {0}: \n     Verplaatsing naar eerste plaatsing ({1}) \n     Eindtijd {3}e plaatsing ({2})\n'.format(node_name, node_time, route_total_start, count) 
            else:
                plan_output += '{0}: \n     Werktijd plaatsing ({1}) \n     Verplaatsing naar volgende plaatsing of depot ({2}) \n     Eindtijd {4}e plaatsing of aankomst depot ({3})\n'.format(node_name, node_load, node_time, route_total_start, count)
            count = count + 1    

        plan_output += 'Aankomst in {0}: {1}\n\n'.format(final_node_name,
                                                 route_distance)
        plan_output += 'Werk en Verplaatsing van camionette {0}: {1}\n'.format(vehicle_id, route_total)
        plan_output += 'Totale werktijd: {}\n'.format(route_load)
        plan_output += 'Totale reistijd: {}\n\n'.format(route_time)        
        print(plan_output)
        total_distance += route_distance_min
        total_load += route_load_min

        if route_load_min != 0:
            Result_W.insert(tk.END, plan_output)
            Result_W.insert(tk.END, '------------------------------------------------------------------------------------\n\n')
            Result_W.pack()
            
    print('Totale reistijd van alle routes: {}m'.format(total_distance))
    print('Total werktijd van alle routes: {}'.format(total_load))

    Result_W.pack()
    Result_W.mainloop()
  
def main():

    data = create_data_model()

    manager = pywrapcp.RoutingIndexManager(len(data['time_matrix']),
                                           data['num_vehicles'], data['starts'],
                                           data['ends'])
    
    routing = pywrapcp.RoutingModel(manager)

    def distance_callback(from_index, to_index):
        # Returns the distance between the two nodes.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['time_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Add Time Dimension: The total route + work cannot be longer than 480min (8h work)
    routing.AddDimension(
        transit_callback_index,
        0,  # null capacity slack
        900,  # vehicle maximum time of route
        True,  # start cumul to zero
        'Time',)

    time_dimension = routing.GetDimensionOrDie('Time')
    time_dimension.SetGlobalSpanCostCoefficient(100)

    def demand_callback(from_index):
        # Returns the demand of the node.
        from_node = manager.IndexToNode(from_index)
        return data['demands'][from_node]

    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)
    
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index,
        0,  # null capacity slack
        data['vehicle_capacities'],  # vehicle maximum capacities
        True,  # start cumul to zero
        'Capacity')

    # Allow all locations except the first two to be droppable.
    disjunction_penalty = 200
    for node in range(1, len(data['time_matrix'])):
      routing.AddDisjunction([manager.NodeToIndex(node)], disjunction_penalty)
    
    # Assign jobs for two workers to the same vehicle
    for node in range(1, len(data['time_matrix'])):
        if node in (data['two_workers']):
            index =  manager.NodeToIndex(node)
            routing.VehicleVar(index).SetValues([0])
        else:
            index =  manager.NodeToIndex(node)
            routing.VehicleVar(index).SetValues([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])

    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)
    search_parameters.local_search_metaheuristic = (
        routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)
    search_parameters.time_limit.FromSeconds(10)
    
    # Solve the problem.
    assignment = routing.SolveWithParameters(search_parameters)

    if assignment:
        print_solution(data, manager, routing, assignment)
    else:
        print('No solution found !')

if __name__ == '__main__':
    main()